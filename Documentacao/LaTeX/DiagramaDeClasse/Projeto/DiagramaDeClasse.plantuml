@startuml DiagramaDeClasse


class GraphMatrix{
    + matrix: int[][]
    + matrix_peso_vertice: int[]
    + n_vertice: int
    + GraphMatrix(int n_vertices):void
    - preencherMatrizComZeros():void
    + getQuantidadeDeArestasNaMatriz():int
    + existeVerticeNaMatriz(int v_find):boolean
    + existeArestaNaMatriz(int v_origem, int v_destino):boolean
    + getQuantidadeVerticesNaMatriz():int
    + getQuantidadeArestas():int
    + addArestaNaMatriz(int v_origem, int v_destino):void
    + addArestaNaMatriz(int v_origem, int v_destino, int peso):void
    + rmArestaDaMatriz(int v_origem, int v_destino):void
    + ponderarVertice(int rotulo, int peso):void
    + ponderarAresta(int v_origem, int v_destino, int peso):void
    + existeAdjacenciaEntreOsVertices(int v_origem, int v_destino):boolean
    + isVazio():boolean
    + isCompleto():boolean
    + isArestasAdjacentes(int v_origem, int v_destino, int w_origem, int w_destino):boolean
}

class Graph{
    + n_vertices: int
    + vertices: List<Vertice>
    + arestas: List<Aresta>
    + ROTULOS_VERTICE: int = 0
    + ROTULOS_ARESTA: int = 0
    + tabela_busca_profundidade: Tabela
    + Graph(int n_vertices):void
    + GerarListaDeAdjacencia(): void
    + GerarListaDeAdjacenciaAPartirDaMatriz(): void
    - existeVertice(int v_find): boolean
    + existeAdjacenciaEntreOsVertices(int v_origem, int v_destino): boolean
    + addAresta(int v_origem, int v_destino): void
    + addAresta(Aresta aresta: void
    + rmAresta(int v_origem, int v_destino): void
    + getQuantidadeVertices(): int
    + getQuantidadeArestas(): int
    + ponderarVertice(int rotulo, int peso): void
    + ponderarAresta(int v_origem, int v_destino, int peso): void
    + getAresta(int v_origem, int v_destino): Aresta
    + getArestaFromList(int index: Aresta
    + isVazio(): boolean
    + isCompleto(): boolean
    + isArestasAdjacentes(int v_origem, int v_destino, int w_origem, int w_destino): boolean
    + toString(): String
    + ExecutarBuscaEmProfundidade(boolean print_tabela: void
    + ExecutarBuscaEmProfundidade(): void
    - BuscaEmProfundidade( int v ):void
    + ExecutarNaiveBridgeFind(): boolean
    + buscaNaive(): void
    + executarBuscarPontes(): void
    - BuscarPontes(int v) : void

}
class Vertice {
    + rotulo: int
    + arestas: List<Vertice>
    + peso : int
    + Vertice(int rotulo) : void
    + addAresta(Vertice e) : void
    + arestasToString() : String
}

class Aresta {
    + rotulo:int
    + peso:int
    + rotuloVerticeV:int
    + rotuloVerticeW:int
    + Aresta(int rotulo, int peso, int rotuloVerticeV, int rotuloVerticeW)
    + Aresta(int rotulo, int rotuloVerticeV, int rotuloVerticeW)
}

class Tabela {
    +  T: int
    +  TD: int[]
    +  TT: int[]
    +  pai: int[]
    +  isCompleta: boolean
    +  n_vertices: int
    + Tabela(int vertices) : void
    +  zerarTabela(int vertices) : void
    +  aindaHaVerticesParaExplorar(): boolean
    +  proximoVerticeAExplorar(): int
    +  toString(): String
}


GraphMatrix <|-- Graph
Graph o-- Aresta
Graph o-- Vertice
Graph -- Tabela
' GraphIO -[hidden]- GraphGenerator

@enduml